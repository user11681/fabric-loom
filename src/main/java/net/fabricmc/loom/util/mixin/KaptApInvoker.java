/*
 * This file is part of fabric-loom, licensed under the MIT License (MIT).
 *
 * Copyright (c) 2016, 2017, 2018 FabricMC
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

package net.fabricmc.loom.util.mixin;

import java.io.File;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.List;
import java.util.stream.Collectors;

import kotlin.Unit;
import org.gradle.api.Project;
import org.gradle.api.artifacts.Configuration;
import org.gradle.api.tasks.compile.JavaCompile;
import org.jetbrains.annotations.NotNull;
import org.jetbrains.kotlin.gradle.internal.Kapt3GradleSubplugin;
import org.jetbrains.kotlin.gradle.plugin.KaptExtension;

import net.fabricmc.loom.LoomExtension;

public class KaptApInvoker extends AnnotationProcessorInvoker<JavaCompile> {
    private final KaptExtension kaptExtension = project.getExtensions().getByType(KaptExtension.class);
    // Refmap will be written to here with mixin, then moved after JavaCompile to the correct place
    private final File dummyRefmapDirectory;

    public KaptApInvoker(Project project) {
        super(project, getConfigurations(project), project.getTasks().withType(JavaCompile.class));

        try {
            dummyRefmapDirectory = Files.createTempDirectory("temp_refmap").toFile();
        } catch (IOException exception) {
            throw new RuntimeException(exception);
        }

        dummyRefmapDirectory.deleteOnExit();

        // Needed for mixin AP to run
        kaptExtension.setIncludeCompileClasspath(false);
    }

    @Override
    public void configureMixin() {
        super.configureMixin();

        for (JavaCompile task : invokerTasks) {
            // Kapt only allows specifying javac args to all annotation processors at once. So we need to specify some dummy
            // target location for the refmap and then move it to the correct place for each sourceset
            task.doLast(t -> {
                try {
                    LoomExtension extension = this.project.getExtensions().getByType(LoomExtension.class);
                    Path src = Paths.get(getRefmapDestination(task, extension));
                    Path dest = Paths.get(task.getDestinationDir().toString(), extension.getRefmapName());

                    // Possible that no mixin annotations exist
                    if (Files.exists(src)) {
                        this.project.getLogger().info("Copying refmap from " + src + " to " + dest);
                        Files.move(src, dest);
                    }
                } catch (IOException exception) {
                    this.project.getLogger().warn("Could not move refmap generated by kapt for task " + task, exception);
                }
            });
        }
    }

    @NotNull
    private static List<Configuration> getConfigurations(Project project) {
        // Kapt generates an AP configuration for every source set based off of the getKaptConfigurationName method.
        return AnnotationProcessorInvoker.getNonTestSourceSets(project)
            .map(sourceSet -> project.getConfigurations().getByName(Kapt3GradleSubplugin.Companion.getKaptConfigurationName(sourceSet.getName())))
            .collect(Collectors.toList());
    }

    @Override
    protected void passArgument(JavaCompile compileTask, String key, String value) {
        // Note: this MUST be run early on, before kapt uses this data, and there is only a point to setting the value once since
        // kapt shares the options with all java compilers
        kaptExtension.arguments(args -> {
            args.arg(key, value);
            return Unit.INSTANCE;
        });
    }

    @Override
    protected File getDestinationDir(JavaCompile task) {
        return dummyRefmapDirectory;
    }
}
